/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/microsoft/typescript-go/cbridge */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
extern size_t _GoStringLen(_GoString_ s);
extern const char *_GoStringPtr(_GoString_ s);
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "c_bridge.go"

#include <stdlib.h>
#include <string.h>

typedef struct {
    int code;
    char* category;
    char* message;
    char* file;
    int line;
    int column;
    int length;
} c_diagnostic;

typedef struct {
    int success;
    char* config_file;
    c_diagnostic* diagnostics;
    int diagnostic_count;
    char** emitted_files;
    int emitted_file_count;
    char** written_file_paths;
    char** written_file_contents;
    int written_file_count;
} c_build_result;

typedef struct {
    char* path;
    char* content;
} c_file_entry;

typedef struct {
    c_file_entry* files;
    int file_count;
    char** directories;
    int directory_count;
} c_file_resolver_data;

// Dynamic file resolver callback types (like ESBuild plugin callbacks)
typedef struct {
    char* path;
    int path_length;
} c_file_resolve_args;

typedef struct {
    char* content;
    int content_length;
    int exists;  // 0 = not found, 1 = file, 2 = directory
    char** directory_files;  // for directories
    int directory_files_count;
} c_file_resolve_result;

// Callback function pointer (like plugin callbacks)
typedef c_file_resolve_result* (*file_resolve_callback)(c_file_resolve_args*, void*);

// Resolver callbacks structure (like plugin system)
typedef struct {
    file_resolve_callback resolver;
    void* resolver_data;  // Swift callback context
} c_resolver_callbacks;

// Helper function to call function pointer (needed for CGO)
static inline c_file_resolve_result* call_file_resolve_callback(file_resolve_callback cb, c_file_resolve_args* args, void* data) {
    return cb(args, data);
}

#line 1 "cgo-generated-wrapper"

#line 3 "esbuild_c_bridge.go"

#include <stdlib.h>

typedef struct {
    int* values;
    int count;
} c_int_array;

typedef struct {
	// Logging and Output Control
	int color;                    // StderrColor enum
	int log_level;               // LogLevel enum  
	int log_limit;               // int
	char** log_override_keys;    // keys for map[string]LogLevel
	int* log_override_values;    // values for map[string]LogLevel
	int log_override_count;      // count of log override entries

	// Source Map
	int sourcemap;               // SourceMap enum
	char* source_root;           // string
	int sources_content;         // SourcesContent enum

	// Target and Compatibility  
	int target;                  // Target enum
	int* engine_names;           // EngineName enum array
	char** engine_versions;      // string array for engine versions
	int engines_count;           // count of engines
	char** supported_keys;       // keys for map[string]bool
	int* supported_values;       // values for map[string]bool (0/1)
	int supported_count;         // count of supported entries

	// Platform and Format
	int platform;                // Platform enum
	int format;                  // Format enum
	char* global_name;           // string

	// Minification and Property Mangling
	char* mangle_props;          // string (regex)
	char* reserve_props;         // string (regex)
	int mangle_quoted;           // MangleQuoted enum
	char** mangle_cache_keys;    // keys for map[string]interface{}
	char** mangle_cache_values;  // values as JSON strings
	int mangle_cache_count;      // count of mangle cache entries
	int drop;                    // Drop enum (bitfield)
	char** drop_labels;          // string array
	int drop_labels_count;       // count of drop labels
	int minify_whitespace;       // bool (0/1)
	int minify_identifiers;      // bool (0/1)
	int minify_syntax;           // bool (0/1)
	int line_limit;              // int
	int charset;                 // Charset enum
	int tree_shaking;            // TreeShaking enum
	int ignore_annotations;      // bool (0/1)
	int legal_comments;          // LegalComments enum

	// JSX Configuration
	int jsx;                     // JSX enum
	char* jsx_factory;           // string
	char* jsx_fragment;          // string
	char* jsx_import_source;     // string
	int jsx_dev;                 // bool (0/1)
	int jsx_side_effects;        // bool (0/1)

	// TypeScript Configuration
	char* tsconfig_raw;          // string (JSON)

	// Code Injection
	char* banner;                // string
	char* footer;                // string

	// Code Transformation
	char** define_keys;          // keys for map[string]string
	char** define_values;        // values for map[string]string
	int define_count;            // count of define entries
	char** pure;                 // string array
	int pure_count;              // count of pure functions
	int keep_names;              // bool (0/1)

	// Input Configuration
	char* sourcefile;            // string
	int loader;                  // Loader enum
} c_transform_options;

typedef struct {
	char* file;                  // string
	char* namespace;             // string
	int line;                    // int (1-based)
	int column;                  // int (0-based, in bytes)
	int length;                  // int (in bytes)
	char* line_text;             // string
	char* suggestion;            // string
} c_location;

typedef struct {
	char* text;                  // string
	c_location* location;        // optional location
} c_note;

typedef struct {
	char* id;                    // string
	char* plugin_name;           // string
	char* text;                  // string
	c_location* location;        // optional location
	c_note* notes;               // array of notes
	int notes_count;             // count of notes
} c_message;

typedef struct {
	c_message* errors;           // array of error messages
	int errors_count;            // count of errors
	c_message* warnings;         // array of warning messages
	int warnings_count;          // count of warnings
	
	char* code;                  // transformed code as string
	int code_length;             // length of code
	char* source_map;            // source map as string (optional)
	int source_map_length;       // length of map (0 if no map)
	char* legal_comments;        // legal comments as string (optional)
	int legal_comments_length;   // length of legal comments (0 if none)
	
	char** mangle_cache_keys;    // keys for mangle cache
	char** mangle_cache_values;  // values for mangle cache
	int mangle_cache_count;      // count of mangle cache entries
} c_transform_result;

typedef struct {
	char* input_path;
	char* output_path;
} esbuild_entry_point;

typedef struct {
	char* contents;
	char* resolve_dir;
	char* sourcefile;
	int loader;
} esbuild_stdin_options;

typedef struct {
	char* path;
	char* contents;
	int contents_length;
	char* hash;
} esbuild_output_file;

// Plugin API structures - moved here to be available for build options

typedef enum {
	RESOLVE_KIND_ENTRY_POINT = 0,
	RESOLVE_KIND_IMPORT_STATEMENT = 1,
	RESOLVE_KIND_REQUIRE_CALL = 2,
	RESOLVE_KIND_DYNAMIC_IMPORT = 3,
	RESOLVE_KIND_REQUIRE_RESOLVE = 4,
	RESOLVE_KIND_IMPORT_RULE = 5,
	RESOLVE_KIND_COMPOSES_FROM = 6,
	RESOLVE_KIND_URL_TOKEN = 7
} c_resolve_kind;

typedef struct {
	char* path;                  // string
	char* importer;              // string
	char* namespace;             // string
	char* resolve_dir;           // string
	int kind;                    // c_resolve_kind enum
	char* plugin_data;           // JSON string for pluginData
	char** with_keys;            // keys for with map
	char** with_values;          // values for with map
	int with_count;              // count of with entries
} c_on_resolve_args;

typedef struct {
	char* path;                  // string
	char* namespace;             // string
	char* suffix;                // string
	char* plugin_data;           // JSON string for pluginData
	char** with_keys;            // keys for with map
	char** with_values;          // values for with map
	int with_count;              // count of with entries
} c_on_load_args;

typedef struct {
	char* path;                  // optional string
	char* namespace;             // optional string
	int external;                // bool (0/1) (-1 for nil)
	int side_effects;            // bool (0/1) (-1 for nil)
	char* suffix;                // optional string
	char* plugin_data;           // JSON string for pluginData
	char* plugin_name;           // optional string
	c_message* errors;           // array of errors
	int errors_count;            // count of errors
	c_message* warnings;         // array of warnings
	int warnings_count;          // count of warnings
	char** watch_files;          // array of file paths
	int watch_files_count;       // count of watch files
	char** watch_dirs;           // array of directory paths
	int watch_dirs_count;        // count of watch dirs
} c_on_resolve_result;

typedef struct {
	char* contents;              // optional byte array
	int contents_length;         // length of contents (0 if nil)
	int loader;                  // Loader enum (-1 for nil)
	char* resolve_dir;           // optional string
	char* plugin_data;           // JSON string for pluginData
	char* plugin_name;           // optional string
	c_message* errors;           // array of errors
	int errors_count;            // count of errors
	c_message* warnings;         // array of warnings
	int warnings_count;          // count of warnings
	char** watch_files;          // array of file paths
	int watch_files_count;       // count of watch files
	char** watch_dirs;           // array of directory paths
	int watch_dirs_count;        // count of watch dirs
} c_on_load_result;

// Plugin callback function pointer types
typedef c_on_resolve_result* (*on_resolve_callback)(c_on_resolve_args*, void*);
typedef c_on_load_result* (*on_load_callback)(c_on_load_args*, void*);
typedef void (*on_start_callback)(void*);
typedef void (*on_end_callback)(void*);

typedef struct {
	char* filter;                // filter regex for the callback
	char* namespace;             // namespace filter (optional)
	on_resolve_callback callback; // callback function pointer
	void* callback_data;         // Swift closure context
} c_plugin_resolve_hook;

typedef struct {
	char* filter;                // filter regex for the callback
	char* namespace;             // namespace filter (optional) 
	on_load_callback callback;   // callback function pointer
	void* callback_data;         // Swift closure context
} c_plugin_load_hook;

typedef struct {
	char* name;                  // plugin name
	c_plugin_resolve_hook* resolve_hooks; // array of resolve hooks
	int resolve_hooks_count;     // count of resolve hooks
	c_plugin_load_hook* load_hooks; // array of load hooks
	int load_hooks_count;        // count of load hooks
	on_start_callback on_start;  // start callback (optional)
	on_end_callback on_end;      // end callback (optional)
	void* start_data;            // start callback context
	void* end_data;              // end callback context
} c_plugin;

typedef struct {
	// Logging and Output Control
	int color;                    // StderrColor enum
	int log_level;               // LogLevel enum  
	int log_limit;               // int
	char** log_override_keys;    // keys for map[string]LogLevel
	int* log_override_values;    // values for map[string]LogLevel
	int log_override_count;      // count of log override entries

	// Source Map
	int sourcemap;               // SourceMap enum
	char* source_root;           // string
	int sources_content;         // SourcesContent enum

	// Target and Compatibility  
	int target;                  // Target enum
	int* engine_names;           // EngineName enum array
	char** engine_versions;      // string array for engine versions
	int engines_count;           // count of engines
	char** supported_keys;       // keys for map[string]bool
	int* supported_values;       // values for map[string]bool (0/1)
	int supported_count;         // count of supported entries

	// Platform and Format
	int platform;                // Platform enum
	int format;                  // Format enum
	char* global_name;           // string

	// Minification and Property Mangling
	char* mangle_props;          // string (regex)
	char* reserve_props;         // string (regex)
	int mangle_quoted;           // MangleQuoted enum
	char** mangle_cache_keys;    // keys for map[string]interface{}
	char** mangle_cache_values;  // values as JSON strings
	int mangle_cache_count;      // count of mangle cache entries
	int drop;                    // Drop enum (bitfield)
	char** drop_labels;          // string array
	int drop_labels_count;       // count of drop labels
	int minify_whitespace;       // bool (0/1)
	int minify_identifiers;      // bool (0/1)
	int minify_syntax;           // bool (0/1)
	int line_limit;              // int
	int charset;                 // Charset enum
	int tree_shaking;            // TreeShaking enum
	int ignore_annotations;      // bool (0/1)
	int legal_comments;          // LegalComments enum

	// JSX Configuration
	int jsx;                     // JSX enum
	char* jsx_factory;           // string
	char* jsx_fragment;          // string
	char* jsx_import_source;     // string
	int jsx_dev;                 // bool (0/1)
	int jsx_side_effects;        // bool (0/1)

	// TypeScript Configuration
	char* tsconfig;              // string (file path)
	char* tsconfig_raw;          // string (JSON)

	// Code Injection
	char** banner_keys;          // keys for map[string]string (file types)
	char** banner_values;        // values for map[string]string
	int banner_count;            // count of banner entries
	char** footer_keys;          // keys for map[string]string (file types)
	char** footer_values;        // values for map[string]string
	int footer_count;            // count of footer entries

	// Code Transformation
	char** define_keys;          // keys for map[string]string
	char** define_values;        // values for map[string]string
	int define_count;            // count of define entries
	char** pure;                 // string array
	int pure_count;              // count of pure functions
	int keep_names;              // bool (0/1)

	// Build Configuration
	int bundle;                  // bool (0/1)
	int preserve_symlinks;       // bool (0/1)
	int splitting;               // bool (0/1)
	char* outfile;               // string
	char* outdir;                // string
	char* outbase;               // string
	char* abs_working_dir;       // string
	int metafile;                // bool (0/1)
	int write;                   // bool (0/1)
	int allow_overwrite;         // bool (0/1)

	// Module Resolution
	char** external;             // string array
	int external_count;          // count of external entries
	int packages;                // Packages enum
	char** alias_keys;           // keys for map[string]string
	char** alias_values;         // values for map[string]string
	int alias_count;             // count of alias entries
	char** main_fields;          // string array
	int main_fields_count;       // count of main fields
	char** conditions;           // string array
	int conditions_count;        // count of conditions
	char** loader_keys;          // keys for map[string]Loader (file extensions)
	int* loader_values;          // values for map[string]Loader
	int loader_count;            // count of loader entries
	char** resolve_extensions;   // string array
	int resolve_extensions_count; // count of resolve extensions
	char** out_extension_keys;   // keys for map[string]string
	char** out_extension_values; // values for map[string]string
	int out_extension_count;     // count of out extension entries
	char* public_path;           // string
	char** inject;               // string array
	int inject_count;            // count of inject entries
	char** node_paths;           // string array
	int node_paths_count;        // count of node paths

	// Naming Templates
	char* entry_names;           // string
	char* chunk_names;           // string
	char* asset_names;           // string

	// Input Configuration
	char** entry_points;         // string array (simple entry points)
	int entry_points_count;      // count of entry points
	esbuild_entry_point* entry_points_advanced; // advanced entry points
	int entry_points_advanced_count;      // count of advanced entry points
	esbuild_stdin_options* stdin;      // stdin options (optional)

	// Plugin Configuration
	c_plugin* plugins;           // array of plugins
	int plugins_count;           // count of plugins
} esbuild_build_options;

typedef struct {
	c_message* errors;           // array of error messages
	int errors_count;            // count of errors
	c_message* warnings;         // array of warning messages
	int warnings_count;          // count of warnings
	esbuild_output_file* output_files; // array of output files
	int output_files_count;      // count of output files
	char* metafile;              // metafile JSON as string
	char** mangle_cache_keys;    // keys for mangle cache
	char** mangle_cache_values;  // values for mangle cache
	int mangle_cache_count;      // count of mangle cache entries
} esbuild_build_result;

// Forward declarations for Swift callback functions
c_on_resolve_result* swift_plugin_on_resolve_callback(c_on_resolve_args* args, void* callbackData);
c_on_load_result* swift_plugin_on_load_callback(c_on_load_args* args, void* callbackData);
void swift_plugin_on_start_callback(void* callbackData);
void swift_plugin_on_end_callback(void* callbackData);

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#if !defined(__cplusplus) || _MSVC_LANG <= 201402L
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
#include <complex>
typedef std::complex<float> GoComplex64;
typedef std::complex<double> GoComplex128;
#endif
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern c_build_result* tsc_build_filesystem(char* projectPath, int printErrors, char* configFile);
extern c_build_result* tsc_build_with_resolver(char* projectPath, int printErrors, char* configFile, c_file_resolver_data* resolverData);
extern c_build_result* tsc_build_with_dynamic_resolver(char* projectPath, int printErrors, char* configFile, c_resolver_callbacks* callbacks);
extern char* tsc_validate_simple(char* code);
extern void tsc_free_string(char* str);
extern void tsc_free_result(c_build_result* result);
extern c_file_resolver_data* tsc_create_resolver_data(void);
extern void tsc_add_file_to_resolver(c_file_resolver_data* data, char* path, char* content);
extern void tsc_add_directory_to_resolver(c_file_resolver_data* data, char* path);
extern void tsc_free_resolver_data(c_file_resolver_data* data);
extern int esbuild_platform_default(void);
extern int esbuild_platform_browser(void);
extern int esbuild_platform_node(void);
extern int esbuild_platform_neutral(void);
extern c_int_array* esbuild_get_all_platform_values(void);
extern void esbuild_free_int_array(c_int_array* arr);

// Format enum functions
//
extern int esbuild_format_default(void);
extern int esbuild_format_iife(void);
extern int esbuild_format_commonjs(void);
extern int esbuild_format_esmodule(void);
extern c_int_array* esbuild_get_all_format_values(void);

// Target enum functions
//
extern int esbuild_target_default(void);
extern int esbuild_target_esnext(void);
extern int esbuild_target_es5(void);
extern int esbuild_target_es2015(void);
extern int esbuild_target_es2016(void);
extern int esbuild_target_es2017(void);
extern int esbuild_target_es2018(void);
extern int esbuild_target_es2019(void);
extern int esbuild_target_es2020(void);
extern int esbuild_target_es2021(void);
extern int esbuild_target_es2022(void);
extern int esbuild_target_es2023(void);
extern int esbuild_target_es2024(void);
extern c_int_array* esbuild_get_all_target_values(void);

// Loader enum functions
//
extern int esbuild_loader_none(void);
extern int esbuild_loader_base64(void);
extern int esbuild_loader_binary(void);
extern int esbuild_loader_copy(void);
extern int esbuild_loader_css(void);
extern int esbuild_loader_dataurl(void);
extern int esbuild_loader_default(void);
extern int esbuild_loader_empty(void);
extern int esbuild_loader_file(void);
extern int esbuild_loader_globalcss(void);
extern int esbuild_loader_js(void);
extern int esbuild_loader_json(void);
extern int esbuild_loader_jsx(void);
extern int esbuild_loader_localcss(void);
extern int esbuild_loader_text(void);
extern int esbuild_loader_ts(void);
extern int esbuild_loader_tsx(void);
extern c_int_array* esbuild_get_all_loader_values(void);

// SourceMap enum functions
//
extern int esbuild_sourcemap_none(void);
extern int esbuild_sourcemap_inline(void);
extern int esbuild_sourcemap_linked(void);
extern int esbuild_sourcemap_external(void);
extern int esbuild_sourcemap_inlineandexternal(void);
extern c_int_array* esbuild_get_all_sourcemap_values(void);

// JSX enum functions
//
extern int esbuild_jsx_transform(void);
extern int esbuild_jsx_preserve(void);
extern int esbuild_jsx_automatic(void);
extern c_int_array* esbuild_get_all_jsx_values(void);

// LogLevel enum functions
//
extern int esbuild_loglevel_silent(void);
extern int esbuild_loglevel_verbose(void);
extern int esbuild_loglevel_debug(void);
extern int esbuild_loglevel_info(void);
extern int esbuild_loglevel_warning(void);
extern int esbuild_loglevel_error(void);
extern c_int_array* esbuild_get_all_loglevel_values(void);

// LegalComments enum functions
//
extern int esbuild_legalcomments_default(void);
extern int esbuild_legalcomments_none(void);
extern int esbuild_legalcomments_inline(void);
extern int esbuild_legalcomments_endoffile(void);
extern int esbuild_legalcomments_linked(void);
extern int esbuild_legalcomments_external(void);
extern c_int_array* esbuild_get_all_legalcomments_values(void);

// Charset enum functions
//
extern int esbuild_charset_default(void);
extern int esbuild_charset_ascii(void);
extern int esbuild_charset_utf8(void);
extern c_int_array* esbuild_get_all_charset_values(void);

// TreeShaking enum functions
//
extern int esbuild_treeshaking_default(void);
extern int esbuild_treeshaking_false(void);
extern int esbuild_treeshaking_true(void);
extern c_int_array* esbuild_get_all_treeshaking_values(void);

// StderrColor enum functions
//
extern int esbuild_color_ifterminal(void);
extern int esbuild_color_never(void);
extern int esbuild_color_always(void);
extern c_int_array* esbuild_get_all_color_values(void);

// Remaining enums - continuing the pattern for the rest
//
extern int esbuild_packages_default(void);
extern int esbuild_packages_bundle(void);
extern int esbuild_packages_external(void);
extern c_int_array* esbuild_get_all_packages_values(void);
extern int esbuild_sourcescontent_include(void);
extern int esbuild_sourcescontent_exclude(void);
extern c_int_array* esbuild_get_all_sourcescontent_values(void);
extern int esbuild_manglequoted_false(void);
extern int esbuild_manglequoted_true(void);
extern c_int_array* esbuild_get_all_manglequoted_values(void);
extern int esbuild_drop_console(void);
extern int esbuild_drop_debugger(void);
extern c_int_array* esbuild_get_all_drop_values(void);

// EngineName enum functions
//
extern int esbuild_engine_chrome(void);
extern int esbuild_engine_deno(void);
extern int esbuild_engine_edge(void);
extern int esbuild_engine_firefox(void);
extern int esbuild_engine_hermes(void);
extern int esbuild_engine_ie(void);
extern int esbuild_engine_ios(void);
extern int esbuild_engine_node(void);
extern int esbuild_engine_opera(void);
extern int esbuild_engine_rhino(void);
extern int esbuild_engine_safari(void);
extern c_int_array* esbuild_get_all_engine_values(void);

// SideEffects enum functions
//
extern int esbuild_sideeffects_true(void);
extern int esbuild_sideeffects_false(void);
extern c_int_array* esbuild_get_all_sideeffects_values(void);

// ResolveKind enum functions
//
extern int esbuild_resolvekind_none(void);
extern int esbuild_resolvekind_entrypoint(void);
extern int esbuild_resolvekind_jsimportstatement(void);
extern int esbuild_resolvekind_jsrequirecall(void);
extern int esbuild_resolvekind_jsdynamicimport(void);
extern int esbuild_resolvekind_jsrequireresolve(void);
extern int esbuild_resolvekind_cssimportrule(void);
extern int esbuild_resolvekind_csscomposesfrom(void);
extern int esbuild_resolvekind_cssurltoken(void);
extern c_int_array* esbuild_get_all_resolvekind_values(void);

// MessageKind enum functions
//
extern int esbuild_messagekind_error(void);
extern int esbuild_messagekind_warning(void);
extern c_int_array* esbuild_get_all_messagekind_values(void);
extern c_transform_options* esbuild_create_transform_options(void);
extern void esbuild_free_transform_options(c_transform_options* opts);
extern c_transform_result* esbuild_create_transform_result(void);
extern c_location* esbuild_create_location(void);
extern c_note* esbuild_create_note(void);
extern c_message* esbuild_create_message(void);
extern void esbuild_free_location(c_location* loc);
extern void esbuild_free_note(c_note* note);
extern void esbuild_free_message(c_message* msg);
extern void esbuild_free_transform_result(c_transform_result* result);
extern c_transform_result* esbuild_transform(char* code, c_transform_options* opts);
extern esbuild_entry_point* esbuild_create_entry_point(void);
extern esbuild_stdin_options* esbuild_create_stdin_options(void);
extern esbuild_output_file* esbuild_create_output_file(void);
extern esbuild_build_options* esbuild_create_build_options(void);
extern esbuild_build_result* esbuild_create_build_result(void);
extern void esbuild_free_entry_point(esbuild_entry_point* ep);
extern void esbuild_free_stdin_options(esbuild_stdin_options* stdin);
extern void esbuild_free_output_file(esbuild_output_file* file);
extern void esbuild_free_build_options(esbuild_build_options* opts);
extern void esbuild_free_build_result(esbuild_build_result* result);
extern esbuild_build_result* esbuild_build(esbuild_build_options* opts);
extern void* register_plugin(c_plugin* plugin);
extern void unregister_plugin(void* pluginID);

#ifdef __cplusplus
}
#endif
